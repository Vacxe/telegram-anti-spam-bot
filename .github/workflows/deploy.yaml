name: Deploy Release
on:
  release:
    types: [ created ]

jobs:
  release-tar:
    name: Build release Tar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        name: Set up JDK 23
        with:
          distribution: "temurin"
          java-version: 23
          cache: gradle
      - name: Build release tar
        run: ./gradlew distTar
      - name: Tar Checksum
        run: shasum -a 256 build/distributions/telegram-anti-spam-bot.tar
      - name: Get release information
        id: get_release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload artifacts to release
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./build/distributions/telegram-anti-spam-bot.tar
          asset_name: telegram-anti-spam-bot.tar
          asset_content_type: application/x-tar

  github-packages-build-push:
    name: Build and Push to GitHub Packages
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    needs: [ release-tar ]
    steps:
      - uses: actions/checkout@v4

      - name: Get release information
        id: get_release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Docker Login
        run: echo $PACKAGES_WRITE_TOKEN | docker login ghcr.io -u $USERNAME --password-stdin
        env:
          PACKAGES_WRITE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ github.actor }}

      - name: Docker Build
        run: docker build -t ghcr.io/vacxe/telegram-anti-spam-bot:$VERSION --build-arg="BOT_VERSION=$VERSION" .
        env:
          VERSION: ${{ steps.get_release.outputs.tag_name }}

      - name: Deploy
        run: docker push ghcr.io/vacxe/telegram-anti-spam-bot:$VERSION
        env:
          VERSION: ${{ steps.get_release.outputs.tag_name }}

  docker-registry-build-push:
    name: Build and Push to Docker Registry
    runs-on: ubuntu-latest
    needs: [ release-tar ]
    steps:
      - uses: actions/checkout@v4

      - name: Get release information
        id: get_release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
          
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: vacxe
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: vvacxe/telegram-anti-spam-bot:${{ steps.get_release.outputs.tag_name }}
          build-args: RELEASE_VERSION=${{ steps.get_release.outputs.tag_name }}
